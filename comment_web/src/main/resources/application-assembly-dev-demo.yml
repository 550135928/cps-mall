#组件配置
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:8101/eureka/  #eureka服务器地址
    registry-fetch-interval-seconds: 3      #eureka client刷新本地缓存时间,默认30s
  instance:
    lease-renewal-interval-in-seconds: 1    #每间隔1s，向服务端发送一次心跳，证明自己依然”存活“，默认30秒
    lease-expiration-duration-in-seconds: 2 #告诉服务端，如果我2s之内没有给你发心跳，就代表我“死”了，将我踢出掉。默认为90秒


spring:
  datasource:
    druid:
      initial-size: 5                               # 初始化时建立物理连接的个数
      min-idle: 5                                   # 最小连接池数量
      max-active: 10                                # 最大连接池数量
      max-wait: 60000                               # 获取连接时最大等待时间，单位毫秒
      test-while-idle: true                         # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-on-borrow: true                          # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false                         # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      time-between-eviction-runs-millis: 60000      # 配置检测可以关闭的空闲连接间隔时间
      min-evictable-idle-time-millis: 300000        # 配置连接在池中的最小生存时间
      max-evictable-idle-time-millis: 400000        # 配置连接在池中的最小生存时间
      validation-query: SELECT 1 FROM DUAL          # 用来检测连接是否有效的sql，要求是一个查询语句
      use-global-data-source-stat: true             # 合并多个DruidDataSource的监控数据

      #开启监控
      filter: stat,wall                             # 监控统计的stat,以及防sql注入的wall
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500  # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      aop-patterns: com.xm.*.service.*              # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      stat-view-servlet:
        enabled: true
        reset-enable: true                          # 是否能够重置数据
        login-username: druid监控账号
        login-password: druid监控密码
        url-pattern: /druid/*                       #访问路径为/druid时，跳转到StatViewServlet



  rabbitmq:
    host: 127.0.0.1 #rabbitmq服务地址
    port: 5672  #端口
    virtual-host: /share  #所属空间
    username: guest
    password: guest
    connection-timeout: 15000     #连接超时时间
    type: simple
#    publisher-confirms: true
#    publisher-returns: true
    listener:
      simple:
        acknowledge-mode: manual  #消费确认置为手动
        prefetch: 1               #限流（海量数据，同时只能过来一条）
        concurrency: 1            #消费端
        max-concurrency: 10       #最大消费端数
        default-requeue-rejected: false #  设置为false，消息重试失败后丢弃或发往死信队列
        retry:
          enabled: true           # 允许消息消费失败的重试
          max-attempts: 3         # 消息最多消费次数3次
          initial-interval: 10000 # 消息多次消费的间隔10秒

  redis:
    host: 127.0.0.1 #redis服务地址
    password: 密码
    port: 6379  #端口
    database: 0
    timeout: 2000
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0

  #链路追踪服务配置
  #不需要可以去除依赖删除配置
  zipkin:
    base-url: http://127.0.0.1:9411
    sender:
      type: web
  sleuth:
    sampler:
      probability: 1

